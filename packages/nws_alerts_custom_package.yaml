#################################################################################
#
#   This is the package for NWS ALERTS USING THE CUSTOM COMPONENT
#
#################################################################################

## For testing the API

# https://api.weather.gov/alerts/active/count

# https://api.weather.gov/alerts/active?zone=INZ009,INC033

########################  SENSOR  ###############################################

## the NWS Sensor can now be ionstalled using HACS. If you use HACS you can remove the nws_alerts sensor from here.

sensor:
  # https://github.com/eracknaphobia/nws_custom_component
  - platform: nws_alerts
    zone_id: 'INZ009,INC033'
  - platform: template
    sensors:
      nws_alerts_are_active:
        friendly_name: NWS Alerts Are Active
        entity_id: sensor.nws_alerts
        value_template: >
          {% if states('sensor.nws_alerts') | int > 0 %}
            on
          {% else %}
            off
          {% endif %}
        icon_template: >-
          {% if states('sensor.nws_alerts') | int > 0 %}
            mdi:weather-lightning
          {% else %}
            mdi:weather-sunny
          {% endif %}
          
  - platform: weatheralerts
    state: IN
    zone: 9
    county: 33
  

#### these are only used for the older rest sensor code #############################

  - platform: rest
    resource: https://api.weather.gov/alerts/active?zone=INZ009,INC033
    name: NWS Alert Event Raw
    value_template: >
      {% if value_json.features[0] is defined %}
        {{ value_json['features'][0]['properties'].event }}
      {% else %}
        None
      {% endif %}
    json_attributes:
      - features
    headers:
      User-Agent: Homeassistant
      Accept: application/geo+json
    scan_interval: 60

######################## BINARY SENSOR  #########################################

binary_sensor:
  - platform: template
    sensors:
      nws_alerts_are_active:
        friendly_name: NWS Alerts Are Active
        entity_id: sensor.nws_alerts
        value_template: >
          {{ states('sensor.nws_alerts') | int > 0 }}
        icon_template: >-
          {% if states('sensor.nws_alerts') | int > 0 %}
            mdi:weather-lightning
          {% else %}
            mdi:weather-sunny
          {% endif %}
      # nws_new_alert:
        # friendly_name: NWS Alert is New
        # entity_id: sensor.nws_alerts
        # value_template: >
          # {{ state_attr('sensor.nws_alerts', 'event_id').split('-')[0] not in states.variable.nws_alerts_event_ids.attributes.values()|list }}


######################## INPUT BOOLEAN  #########################################

input_boolean:
  #bool_9:
  nws_dismiss_persistent_notification:
    name: Dismiss NWS Persistent Notification          
    
########################  AUTOMATION  ###########################################

automation:
  - alias: 'NWS Weather Alert Pop Up Control'
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.nws_alerts
      # - platform: homeassistant
        # event: start
    condition:
      - condition: template
        value_template: "{{ states('sensor.nws_alerts') | int > 0 }}"
      - condition: template
        value_template: '{{ trigger.to_state.state|float > trigger.from_state.state|float }}'
      # - condition: state
        # entity_id: binary_sensor.nws_new_alert
        # state: 'on'
      - condition: template
        value_template: "{{ (trigger.to_state.attributes.event_id).split('-')[0] not in states.variable.nws_alerts_event_ids.attributes.values()|list }}"
    action:
      service: script.nws_popup_on_wx_alert
      data_template:
        title: >
          "{{ state_attr('sensor.nws_alerts', 'title').split(' - ')[0] }}"
        message: >
          "{{ state_attr('sensor.nws_alerts', 'display_desc').split('\n\n-\n\n')[0] }}"
          
  - alias: NWS Notification Weather Alert
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: sensor.nws_alerts
    condition:
      - condition: template
        value_template: "{{states('sensor.nws_alerts') | int > 0}}"
      - condition: template
        value_template: '{{ trigger.to_state.state|float > trigger.from_state.state|float }}'
      - condition: template
        value_template: "{{ state_attr('sensor.nws_alerts', 'event_id') != state_attr('variable.nws_alerts_event_ids', 'previous') }}"
      # - condition: state
        # entity_id: binary_sensor.nws_new_alert
        # state: 'on'
      - condition: template
        value_template: "{{ (trigger.to_state.attributes.event_id).split('-')[0] not in states.variable.nws_alerts_event_ids.attributes.values()|list }}"
    action:
      - service: notify.pushbullet_notify
        data_template:
          message: >
            "NWS: {{ state_attr('sensor.nws_alerts', 'title').split(' - ')[0] }}"
      - service: notify.nws_alerts_record
        data_template:
          message: >
            event: {{ states('sensor.nws_alert_event_raw' ) }}, 
            id: {{ state_attr('sensor.nws_alert_event_raw', 'features' )[0].id }},
            sent: {{ state_attr('sensor.nws_alert_event_raw', 'features' )[0].properties.sent }},
            headline: {{ state_attr('sensor.nws_alert_event_raw', 'features' )[0].properties.headline }}
            
  - alias: NWS Announce Weather Alert
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.nws_alerts
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{states('sensor.nws_alerts') | int > 0}}"
        - condition: template
          value_template: '{{ trigger.to_state.state|float > trigger.from_state.state|float }}'
        - condition: template
          value_template: "{{ ('Severe Thunderstorm Warning' in state_attr('sensor.nws_alerts', 'title')) or ('Tornado Warning' in state_attr('sensor.nws_alerts', 'title')) }}"
        # - condition: state
        # entity_id: binary_sensor.nws_new_alert
        # state: 'on'
        - condition: template
          value_template: "{{ (trigger.to_state.attributes.event_id).split('-')[0] not in states.variable.nws_alerts_event_ids.attributes.values()|list }}"
    action:
      - service: media_player.volume_set
        data:
          entity_id:
            - media_player.computer_room_dot
            - media_player.kitchen_dot
            - media_player.garage_dot
            - media_player.basement_dot
            - media_player.lg_webos_tv_echo
          volume_level: 0.9
      - service: notify.alexa_media
        data_template:
          target: 
            - media_player.computer_room_dot
            - media_player.kitchen_dot
            - media_player.garage_dot
            - media_player.basement_dot
            - media_player.lg_webos_tv_echo
          data:
            type: tts
          message: >
            {% if 'Severe Thunderstorm Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a severe thunderstorm warning for our area
            {% elif 'Tornado Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a tornado warning for our area
            {% endif %}
      - delay: '00:00:15'
      - service: notify.alexa_media
        data_template:
          target: 
            - media_player.computer_room_dot
            - media_player.kitchen_dot
            - media_player.bedroom_2_dot
            - media_player.garage_dot
            - media_player.basement_dot
            - media_player.lg_webos_tv_echo
          data:
            type: tts
          message: >
            {% if 'Severe Thunderstorm Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a severe thunderstorm warning for our area
            {% elif 'Tornado Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a tornado warning for our area
            {% endif %}
                  
  - alias: NWS Announce Weather Alert for MBR
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.nws_alerts
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{states('sensor.nws_alerts') | int > 0}}"
        - condition: template
          value_template: "{{ 'Tornado Warning' in state_attr('sensor.nws_alerts', 'title') }}"
        # - condition: state
        # entity_id: binary_sensor.nws_new_alert
        # state: 'on'
        - condition: template
          value_template: "{{ (trigger.to_state.attributes.event_id).split('-')[0] not in states.variable.nws_alerts_event_ids.attributes.values()|list }}"
    action:
      - service: media_player.volume_set
        data:
          entity_id:
            - media_player.bedroom_2_dot
            - media_player.master_bedroom_dot
            - media_player.big_room_dot
          volume_level: 0.9
      - service: notify.alexa_media
        data:
          target: 
            - media_player.bedroom_2_dot
            - media_player.master_bedroom_dot
            - media_player.big_room_dot
          data:
            type: tts
          message: "Attention!,,,Attention!,,,The National Weather Service Has issued a Tornado Warning for our area."
      - delay: '00:00:15'
      - service: notify.alexa_media
        data:
          target: 
            - media_player.bedroom_2_dot
            - media_player.master_bedroom_dot
            - media_player.big_room_dot
          data:
            type: tts
          message: "Attention!,,,Attention!,,,The National Weather Service Has issued a Tornado Warning for our area."
              
  - alias: NWS Announce Weather Alert on CR Dot for testing
    initial_state: 'off'
    trigger:
      - platform: state
        entity_id: sensor.nws_alerts
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{states('sensor.nws_alerts') | int > 0}}"
        - condition: template
          value_template: '{{ trigger.to_state.state|float > trigger.from_state.state|float }}'
        - condition: template
          value_template: "{{ ('Severe Thunderstorm Warning' in state_attr('sensor.nws_alerts', 'title')) or ('Tornado Warning' in state_attr('sensor.nws_alerts', 'title')) }}"
        # - condition: state
        # entity_id: binary_sensor.nws_new_alert
        # state: 'on'
        - condition: template
          value_template: "{{ (trigger.to_state.attributes.event_id).split('-')[0] not in states.variable.nws_alerts_event_ids.attributes.values()|list }}"
    action:
      - service: media_player.volume_set
        data:
          entity_id:
            - media_player.computer_room_dot
          volume_level: 0.9
      - service: notify.alexa_media
        data_template:
          target: 
            - media_player.computer_room_dot
          data:
            type: tts
          message: >
            {% if 'Severe Thunderstorm Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a severe thunderstorm warning for our area
            {% elif 'Tornado Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a tornado warning for our area
            {% endif %}
      - delay: '00:00:15'
      - service: notify.alexa_media
        data_template:
          target: 
            - media_player.computer_room_dot
          data:
            type: tts
          message: >
            {% if 'Severe Thunderstorm Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a severe thunderstorm warning for our area
            {% elif 'Tornado Warning' in state_attr('sensor.nws_alerts', 'title') %}
              Attention!,,,Attention!,,,The National Weather Service Has issued a tornado warning for our area
            {% endif %}

  - alias: NWS Dismiss Persistent Notification
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: input_boolean.nws_dismiss_persistent_notification
        to: 'off'
    action:
      - service: persistent_notification.dismiss
        data:
          notification_id: "nwswxalert"
          
  - alias: NWS Update Event ID Variable
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.nws_alerts
    condition:
      - condition: template
        value_template: "{{ trigger.from_state.state != 'Unknown' }}"
    action:
      service: variable.set_variable
      data:
        variable: nws_alerts_event_ids
        attributes_template: >
          {
            "history_1": "{{ variable.state }}",
            "history_2": "{{ variable.attributes.history_1 }}",
            "history_3": "{{ variable.attributes.history_2 }}",
            "history_4": "{{ variable.attributes.history_3 }}",
            "history_5": "{{ variable.attributes.history_4 }}",
            "history_6": "{{ variable.attributes.history_5 }}",
            "history_7": "{{ variable.attributes.history_6 }}",
            "history_8": "{{ variable.attributes.history_7 }}",
            "history_9": "{{ variable.attributes.history_8 }}",
            "history_10": "{{ variable.attributes.history_9 }}"
          }
      data_template:
        value: "{{ (trigger.to_state.attributes.event_id).split('-')[0] }}"
            
         
#################################  SCRIPT  ###################################
          
script:
  nws_popup_on_wx_alert:
    alias: NWS Weather Alert Pop Up
    sequence:
        ## Dismiss any current alert so the UI isn't filled 
        ## up with these if there are more then one.
        ## Only show the latest alert
      - service: persistent_notification.dismiss
        data:
          notification_id: "nwswxalert"
        ## Create a new persistant notification in the UI for a new alert
      - service_template: >
          {% if states('sensor.nws_alerts') != '0' %}
            persistent_notification.create
          {% endif %}
        data_template:
          notification_id: "nwswxalert"
          message: "{{ message }}"
          title: '{{ title }}'
      - service: homeassistant.turn_on
        entity_id: input_boolean.nws_dismiss_persistent_notification
        
############################## VARIABLE  #####################################


## this uses the hass_variable custom component.
## you can install thru HACS or manually from https://github.com/rogro82/hass-variables

variable:
  nws_alerts_event_ids:
    value: 'none'
    restore: true
